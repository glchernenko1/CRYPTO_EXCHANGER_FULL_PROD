version: '3.8'

services:
  # Traefik reverse proxy
  traefik:
    image: traefik:v3.0
    container_name: crypto-traefik-prod
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--log.level=ERROR"
      - "--entrypoints.http.address=:80"
      - "--accesslog=false"
    ports:
      - "80:80"
      - "8090:8080"  # Traefik dashboard (изменен порт с 8080 на 8090)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - crypto-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    deploy:
      resources:
        limits:
          memory: 150m
          cpus: 1


  # База данных PostgreSQL
  postgres:
    image: postgres:17-alpine
    container_name: crypto-postgres-prod
    restart: always
    ports:
      - ${PORT_DB}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-postgres}
    networks:
      - crypto-network

  # Redis для кеширования
  redis:
    image: redis:7.2-alpine
    container_name: crypto-redis-prod
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - crypto-network
    deploy:
      resources:
        limits:
          memory: 150m
          cpus: 1


  # Микросервис Google Sheets (запускается первым)
  microservices:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: crypto-microservices-prod
    ports:
      - ${MICROSERVICES_PORT}:${MICROSERVICES_PORT}
    environment:
      - PORT=${MICROSERVICES_PORT}
      - LOG_LEVEL=${LOG_LEVEL}
      - GOOGLE_JSON_PATH=/app/google.json
      - EMAILS_LIST=${EMAILS_LIST:-}
      - EMAILS_PATH="./emails.json"
    volumes:
      - ./logs/microservices/:/app/log
      - type: bind
        source: ./google.json
        target: /app/google.json
#      - ./emails.json:/emails.json
    restart: unless-stopped
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${MICROSERVICES_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    deploy:
      resources:
        limits:
          memory: 150m
          cpus: 0.5


  # Инициализация базы данных (миграции)
#  core-init:
#    build:
#      context: ./core
#      dockerfile: Dockerfile
#    container_name: crypto-core-init-prod
#    environment:
#      - DATABASE_URL=postgres
#      - PORT_DB=${PORT_DB:-5432}
#      - POSTGRES_USER=${POSTGRES_USER:-postgres}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
#      - POSTGRES_DB=${DB_NAME:-postgres}
#      - LOG_LEVEL=${LOG_LEVEL:-INFO}
#      - SERVER_PORT=${SERVER_PORT:-8000}
#    depends_on:
#      postgres:
#        condition: service_started
#      microservices:
#        condition: service_healthy
#    volumes:
#      - init_flag:/tmp/init
#      - ./logs/core-init:/code2/src/log
#    networks:
#      - crypto-network
#    command: >
#      sh -c "
#      if [ ! -f /tmp/init/completed ]; then
#        echo 'Запуск миграций и обновления банков...';
#        cd .. && alembic upgrade head &&
#        cd src && python3 update_banks.py &&
#        mkdir -p /tmp/init && touch /tmp/init/completed &&
#        echo 'Инициализация завершена';
#      else
#        echo 'Инициализация уже была выполнена, пропускаем';
#      fi
#      "

  # Core backend (запускается после микросервисов и инициализации)
  core:
    build:
      context: ./core
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          memory: 300m
          cpus: 1.5
    restart: always
    container_name: crypto-core-prod
    volumes:
      - ./logs/core:/code2/src/log
    environment:
      - DATABASE_URL=postgres
      - PORT_DB=${PORT_DB:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-postgres}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=${SERVER_PORT:-8000}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - GOOGLE_SHEET_IP=microservices
      - GOOGLE_SHEET_PORT=${MICROSERVICES_PORT}
      - IS_PRODUCTION=True
      - PARSER_SETTINGS_TIME_CHECK=120
    depends_on:
#      core-init:
#        condition: service_completed_successfully
      redis:
        condition: service_started
      postgres:
        condition: service_started
      microservices:
        condition: service_healthy
    command: python3 start_backend.py
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    networks:
      - crypto-network

    dns:
      - 1.1.1.1
      - 1.0.0.1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${HOST_ADDRESS}`) && (PathPrefix(`/api`) || Path(`/openapi.json`))"
      - "traefik.http.routers.backend.entrypoints=http"
      # Создаем middleware для удаления префикса /api
      # - "traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api"
      # Применяем middleware к роутеру
      # - "traefik.http.routers.backend.middlewares=api-stripprefix"
      - "traefik.http.services.backend.loadbalancer.server.port=${SERVER_PORT}"

  # Frontend (оптимизированный production build)
  frontend:
    image: 'ogrttt/front_cr_d_s:latest'

#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#      args:
#        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: crypto-frontend-prod
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${HOST_ADDRESS}`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=http"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    restart: unless-stopped
    depends_on:
      - core
    networks:
      - crypto-network

    deploy:
      resources:
        limits:
          memory: 150m
          cpus: 0.5

volumes:
  postgres_data:
  init_flag:


networks:
  crypto-network:
    driver: bridge
